{"version":3,"sources":["../../mothwebsite/src/theme/themes.ts","../../mothwebsite/src/theme/index.ts","../../mothwebsite/src/components/appHeader.tsx","../../mothwebsite/src/utils/urlUtil.ts","../../mothwebsite/src/components/typingCursor.tsx","../../mothwebsite/src/components/displaySlogan.tsx","../../mothwebsite/src/components/typingText.tsx","../../mothwebsite/src/containers/homePage.tsx","../../mothwebsite/src/redux/actionTypes.ts","../../mothwebsite/src/redux/actions/settingsAction.ts","../../mothwebsite/src/utils/colorUtil.ts","../../mothwebsite/src/components/preferenceGroup.tsx","../../mothwebsite/src/components/preferenceItem.tsx","../../mothwebsite/src/containers/tabs/appearanceTab.tsx","../../mothwebsite/src/containers/tabs/languageTab.tsx","../../mothwebsite/src/containers/tabs/aboutTab.tsx","../../mothwebsite/src/containers/tabs/sloganTab.tsx","../../mothwebsite/src/components/responsive.tsx","../../mothwebsite/src/containers/settingsPage.tsx","../../mothwebsite/src/locale/zhHans.ts","../../mothwebsite/src/locale/zhHant.ts","../../mothwebsite/src/locale/enUS.ts","../../mothwebsite/src/locale/index.ts","../../mothwebsite/src/app.tsx","../../mothwebsite/src/utils/registerServiceWorker.ts","../../mothwebsite/src/redux/reducers/settingsReducer.ts","../../mothwebsite/src/redux/reducers/index.ts","../../mothwebsite/src/redux/configureStore.ts","../../mothwebsite/src/index.tsx"],"names":["White","primary","primaryDark","background","accent","textPrimary","textSecondary","Light","Dark","Black","ChromeDark","getTheme","theme","toLowerCase","Container","styled","div","_templateObject","Title","h1","_templateObject2","AppHeader","_this$props","this","props","title","leftExtra","rightExtra","react_default","a","createElement","style","Object","objectSpread","width","undefined","marginRight","flex","marginLeft","Component","getQueryParamsFromUrl","query","URLSearchParams","window","location","search","get","Cursor","span","typingCursor_templateObject","TypingCursor","timer","state","display","_this2","setState","setTimeout","updateCursor","clearTimeout","react_addons_css_transition_group_default","transitionLeaveTimeout","transitionEnterTimeout","transitionName","DisplaySlogan","split","displayText","i","length","push","key","markdown","react_markdown_default","renderers","paragraph","allowedTypes","source","showCursor","flexDirection","typingCursor","React","TypingText","targetText","index","updateIndex","slogan","_this","nowSlogan","nextSlogan","sameIdx","Math","min","slice","text","startsWith","console","log","target","interval","userSelect","textAlign","fontSize","color","fontColor","displaySlogan","defaultProps","Root","homePage_templateObject","HomePage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getSlogan","trim","messages","defineMessages","defaultSlogan","id","intl","formatMessage","map","item","filter","mouseCountdown","handleMouseMove","idle","palette","settingsIcon","react_router_dom","to","index_esm","cursor","alignItems","justifyContent","onMouseMove","appHeader","position","top","boxSizing","height","typingText","connect","replace","language","settings","injectIntl","UPDATE_LANGUAGE","UPDATE_THEME","UPDATE_SLOGAN","updateLanguage","type","updateTheme","updateSlogan","hexToRgbA","hex","alpha","arguments","test","c","substring","uc","parseInt","join","concat","Error","preferenceGroup_templateObject","PreferenceGroup","titleId","children","index_es","preferenceGroup_Title","preferenceItem_templateObject","PreferenceItem","actionView","itemView","preferenceItem_Container","borderColor","ThemeBlockContainer","appearanceTab_templateObject","ThemeBlockSelection","appearanceTab_templateObject2","AppearanceTab","scheme","themeBlock","value","onClick","handle","v","backgroundColor","preferenceGroup_PreferenceGroup","preferenceItem_PreferenceItem","Select","select","languageTab_templateObject","LanguageTab","onSelect","e","onChange","AboutTab","about","role","aria-label","packageJson","version","href","rel","fontWeight","SloganTextarea","TextareaAutosize","sloganTab_templateObject","ButtonBar","sloganTab_templateObject2","SloganTab","showSyntax","saveSuccess","setSlogan","onTextChange","onSave","alert","onReset","onSyntaxArrowClick","customTab","spellCheck","paddingRight","paddingLeft","verticalAlign","className","Mobile","react_responsive_default","assign","maxWidth","Tablet","minWidth","Default","settingsPage_templateObject","Sider","settingsPage_templateObject2","NavItem","NavLink","_templateObject3","ContentContainer","_templateObject4","mapStateToProps","mapDispatchToProps","dispatch","SettingsPage","showMenu","m","page","match","meta","name","Helmet","renderRedirect","react_router","url","content","exact","path","component","render","closeIcon","moreIcon","navItems","link","activeClassName","activeStyle","desktopView","responsive_Default","tabletView","responsive_Tablet","mobileView","responsive_Mobile","settingsPage_Root","zhHans","appName","slogan.default","action.ok","action.save","action.save.success","action.cancel","action.reset","settings.application","settings.appearance","settings.language","settings.language.default","settings.about","settings.slogan","settings.slogan.syntax","settings.slogan.syntax.summary","settings.slogan.custom","settings.slogan.interval","settings.about.release_note","settings.appearance.theme","settings.appearance.theme.white","settings.appearance.theme.black","settings.appearance.theme.light","settings.appearance.theme.dark","settings.appearance.theme.chrome-dark","zhHant","enUS","getLocale","navigator","userLanguage","toLocaleLowerCase","addLocaleData","toConsumableArray","en","zh","App","charSet","route","locale","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","initialState","rootReducer","combineReducers","action","types","middlewares","logger","createStoreWithMiddleware","applyMiddleware","apply","createStore","enhancer","__REDUX_DEVTOOLS_EXTENSION__","actionCreators","persistConfig","storage","persistedReducer","persistReducer","store","ReactDOM","es","integration_react","persistor","persistStore","app","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker","ServiceWorker"],"mappings":"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","file":"static/js/main.d4c42597.chunk.js","sourcesContent":["import { Theme } from './index'\r\n\r\nexport const White = {\r\n  primary: '#fff',\r\n  primaryDark: '#fff',\r\n  background: '#fff',\r\n  accent: '#000',\r\n  textPrimary: '#000',\r\n  textSecondary: '#757575',\r\n} as Theme\r\n\r\nexport const Light = {\r\n  primary: '#fefefe',\r\n  primaryDark: '#f5f5f5',\r\n  background: '#F5F5F5',\r\n  accent: '#000',\r\n  textPrimary: '#212121',\r\n  textSecondary: '#9E9E9E',\r\n} as Theme\r\n\r\nexport const Dark = {\r\n  primary: '#323639',\r\n  primaryDark: '#282c2f',\r\n  background: '#303030',\r\n  accent: '#fff',\r\n  textPrimary: '#fafafa',\r\n  textSecondary: '#d6d6d6',\r\n} as Theme\r\n\r\nexport const Black = {\r\n  primary: '#1c2226',\r\n  primaryDark: '#1b2024',\r\n  background: '#000',\r\n  accent: '#fff',\r\n  textPrimary: '#fff',\r\n  textSecondary: '#a0a0a1',\r\n} as Theme\r\n\r\nexport const ChromeDark = {\r\n  primary: '#333639',\r\n  primaryDark: '#292c2f',\r\n  background: '#202124',\r\n  accent: '#fff',\r\n  textPrimary: '#f1f3f4',\r\n  textSecondary: '#9ba0a5',\r\n} as Theme\r\n","import { Black, Dark, White, Light, ChromeDark } from './themes'\r\nimport { ColorProperty } from 'csstype'\r\n\r\nexport interface Theme {\r\n  primary: ColorProperty\r\n  primaryDark: ColorProperty\r\n  background: ColorProperty\r\n  accent: ColorProperty\r\n  textPrimary: ColorProperty\r\n  textSecondary: ColorProperty\r\n}\r\n\r\nexport function getTheme(theme?: string): Theme {\r\n  switch (theme ? theme.toLowerCase() : '') {\r\n    case 'light':\r\n      return Light\r\n    case 'dark':\r\n      return Dark\r\n    case 'white':\r\n      return White\r\n    case 'black':\r\n      return Black\r\n    case 'chrome-dark':\r\n      return ChromeDark\r\n    default:\r\n      return Light\r\n  }\r\n}\r\n","import React, { Component, CSSProperties, ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  box-sizing: border-box;\r\n  height: 64px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding: 48px 16px;\r\n`\r\n\r\nconst Title = styled.h1`\r\n  padding: 0;\r\n  margin: 0;\r\n`\r\n\r\nclass AppHeader extends Component<{\r\n  title?: string | JSX.Element\r\n  rightExtra?: ReactNode\r\n  leftExtra?: ReactNode\r\n  style?: CSSProperties\r\n}> {\r\n  render() {\r\n    const { title, leftExtra, rightExtra } = this.props\r\n    return (\r\n      <header\r\n        style={{\r\n          width: '100%',\r\n          ...this.props.style,\r\n        }}\r\n      >\r\n        <Container>\r\n          {leftExtra === undefined ? undefined : <div style={{ marginRight: 16 }}>{leftExtra}</div>}\r\n          <Title>{title}</Title>\r\n          <div style={{ flex: 1 }} />\r\n          {rightExtra === undefined ? (\r\n            undefined\r\n          ) : (\r\n            <div style={{ marginLeft: 16 }}>{rightExtra}</div>\r\n          )}\r\n        </Container>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AppHeader\r\n","export const getQueryParamsFromUrl = (query: string): string | null => {\r\n  return new URLSearchParams(window.location.search).get(query)\r\n}\r\n","import React, { Component } from 'react'\r\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group'\r\nimport styled from 'styled-components'\r\n\r\nconst Cursor = styled.span`\r\n  border-width: 0px;\r\n  border-right-width: 0.2em;\r\n  height: 100%;\r\n  width: 0.2em;\r\n  border-style: solid;\r\n  margin-right: -0.4em;\r\n  padding-left: 0.1em;\r\n  padding-right: 0.1em;\r\n`\r\n\r\nclass TypingCursor extends Component {\r\n  timer: number | undefined = undefined\r\n\r\n  state = {\r\n    display: false,\r\n  }\r\n\r\n  updateCursor() {\r\n    this.setState({\r\n      display: !this.state.display,\r\n    })\r\n    this.timer = setTimeout(() => this.updateCursor(), 1000)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateCursor()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.timer !== undefined) {\r\n      clearTimeout(this.timer)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ReactCSSTransitionGroup\r\n        transitionLeaveTimeout={500}\r\n        transitionEnterTimeout={500}\r\n        transitionName='fade'\r\n      >\r\n        {\r\n          this.state.display ? <Cursor/> : null\r\n        }\r\n      </ReactCSSTransitionGroup>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TypingCursor\r\n","import React from 'react'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport TypingCursor from './typingCursor'\r\n\r\nclass DisplaySlogan extends React.Component<{\r\n  displayText: string,\r\n  showCursor?: boolean\r\n}> {\r\n  render():\r\n    | React.ReactElement<any, string | React.JSXElementConstructor<any>>\r\n    | string\r\n    | number\r\n    | {}\r\n    | React.ReactNodeArray\r\n    | React.ReactPortal\r\n    | boolean\r\n    | null\r\n    | undefined {\r\n    const split = this.props.displayText ? this.props.displayText.split('|') : []\r\n    const display = []\r\n    for (let i = 0; i < split.length; i++) {\r\n      if (i > 0) {\r\n        display.push(<br key={i * 2 - 1}/>)\r\n      }\r\n      const markdown = <ReactMarkdown\r\n        key={i * 2}\r\n        renderers={{ paragraph: 'span' }}\r\n        allowedTypes={[\r\n          'root',\r\n          'paragraph',\r\n          'emphasis',\r\n          'strong',\r\n          'delete',\r\n          'link',\r\n          'linkReference',\r\n          'text',\r\n        ]}\r\n        source={split[i]}\r\n      />\r\n      if (i === split.length - 1 && this.props.showCursor) {\r\n        display.push(\r\n          <span style={{\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n          }}>\r\n            {markdown}\r\n            <TypingCursor/>\r\n          </span>,\r\n        )\r\n      } else {\r\n        display.push(\r\n          <span>{markdown}</span>,\r\n        )\r\n      }\r\n    }\r\n    if (display.length === 0 && this.props.showCursor) {\r\n      display.push(<span><TypingCursor/></span>)\r\n    }\r\n    return <div>{display}</div>\r\n  }\r\n}\r\n\r\nexport default DisplaySlogan\r\n","import React, { Component } from 'react'\r\nimport { ColorProperty, TextAlignProperty } from 'csstype'\r\nimport DisplaySlogan from './displaySlogan'\r\n\r\ninterface Props {\r\n  slogan?: string[]\r\n  interval: number\r\n  fontColor: ColorProperty\r\n  fontSize: number\r\n  textAlign: TextAlignProperty\r\n}\r\n\r\nclass TypingText extends Component<Props> {\r\n  static defaultProps = {\r\n    fontSize: 64,\r\n    fontColor: '#000',\r\n    textAlign: 'left',\r\n    slogan: [],\r\n    interval: 3,\r\n  }\r\n\r\n  targetText = ''\r\n  index = -1\r\n  timer: number | undefined = undefined\r\n\r\n  state = {\r\n    displayText: '',\r\n  }\r\n\r\n  updateIndex = () => {\r\n    const slogan = this.props.slogan\r\n    if (slogan === undefined) {\r\n      this.setState({\r\n        displayText: '',\r\n      })\r\n      this.targetText = ''\r\n      return\r\n    }\r\n    if (this.state.displayText === this.targetText) {\r\n      if (this.index > 0 && this.targetText === slogan[this.index % slogan.length]) {\r\n        const nowSlogan = slogan[this.index % slogan.length]\r\n        const nextSlogan = slogan[(this.index + 1) % slogan.length]\r\n        let sameIdx = 0\r\n        for (let i = 0; i < Math.min(nowSlogan.length, nextSlogan.length); i++) {\r\n          if (nowSlogan[i] === nextSlogan[i]) {\r\n            sameIdx++\r\n          } else {\r\n            break\r\n          }\r\n        }\r\n        this.targetText = nowSlogan.slice(0, sameIdx)\r\n      } else {\r\n        this.targetText = slogan[++this.index % slogan.length]\r\n      }\r\n    }\r\n\r\n    let text = this.state.displayText\r\n    if (this.targetText.length > text.length && this.targetText.startsWith(text)) {\r\n      text = this.targetText.slice(0, text.length + 1)\r\n    } else {\r\n      text = text.slice(0, text.length - 1)\r\n    }\r\n\r\n    this.setState({\r\n      displayText: text,\r\n    })\r\n    console.log({\r\n      display: this.state.displayText,\r\n      target: this.targetText,\r\n    })\r\n\r\n    if (this.targetText === text && text === slogan[this.index % slogan.length]) {\r\n      this.timer = setTimeout(\r\n        () => this.updateIndex(),\r\n        this.props.interval * 1000,\r\n      )\r\n      console.log('wait more')\r\n    } else {\r\n      this.timer = setTimeout(\r\n        () => this.updateIndex(),\r\n        this.props.interval * 200 * 0.2,\r\n      )\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateIndex()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.timer !== undefined) {\r\n      clearTimeout(this.timer)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          userSelect: 'none',\r\n          textAlign: this.props.textAlign,\r\n          fontSize: this.props.fontSize,\r\n          color: this.props.fontColor,\r\n        }}\r\n      >\r\n        <DisplaySlogan showCursor={true} displayText={this.state.displayText}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TypingText\r\n","import React, { Component } from 'react'\r\nimport './homePage.css'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { getTheme } from '../theme'\r\nimport { defineMessages, InjectedIntl, injectIntl } from 'react-intl'\r\nimport AppHeader from '../components/appHeader'\r\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group'\r\nimport { MdSettings } from 'react-icons/md'\r\nimport styled from 'styled-components'\r\nimport { getQueryParamsFromUrl } from '../utils/urlUtil'\r\nimport TypingText from '../components/typingText'\r\n\r\nconst Root = styled.div`\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n\r\n  @media (max-width: 768px) {\r\n    padding-top: 0;\r\n    padding-left: 0;\r\n    padding-right: 0;\r\n  }\r\n`\r\n\r\ninterface Props {\r\n  slogan: string\r\n  intl: InjectedIntl\r\n  theme: string\r\n}\r\n\r\ninterface State {\r\n  idle: boolean\r\n}\r\n\r\nclass HomePage extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props)\r\n    this.state = {\r\n      idle: true,\r\n    }\r\n  }\r\n\r\n  getSlogan = (): string[] => {\r\n    let slogan = this.props.slogan\r\n    if (!this.props.slogan || this.props.slogan.trim().length === 0) {\r\n      const messages = defineMessages({\r\n        defaultSlogan: {\r\n          id: 'slogan.default',\r\n        },\r\n      })\r\n      const { intl } = this.props\r\n      slogan = intl.formatMessage(messages.defaultSlogan)\r\n    }\r\n\r\n    return slogan\r\n      .split('\\n')\r\n      .map(item => item.trim())\r\n      .filter(item => item.length > 0)\r\n  }\r\n\r\n  mouseCountdown: number | undefined = undefined\r\n\r\n  handleMouseMove = () => {\r\n    if (this.state.idle) {\r\n      this.setState({\r\n        idle: false,\r\n      })\r\n    }\r\n    if (this.mouseCountdown !== undefined) {\r\n      window.clearTimeout(this.mouseCountdown)\r\n      this.mouseCountdown = undefined\r\n    }\r\n    this.mouseCountdown = window.setTimeout(\r\n      () =>\r\n        this.setState({\r\n          idle: true,\r\n        }),\r\n      2000,\r\n    )\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.mouseCountdown !== undefined) {\r\n      window.clearTimeout(this.mouseCountdown)\r\n      this.mouseCountdown = undefined\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const palette = getTheme(this.props.theme)\r\n\r\n    const settingsIcon = (\r\n      <Link to={'/settings'}>\r\n        <h1>\r\n          <MdSettings\r\n            style={{\r\n              color: palette.textSecondary,\r\n              cursor: 'pointer',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n            }}\r\n          />\r\n        </h1>\r\n      </Link>\r\n    )\r\n    return (\r\n      <Root\r\n        style={{\r\n          background: palette.background,\r\n          cursor: this.state.idle ? 'none' : 'default',\r\n        }}\r\n        onMouseMove={this.handleMouseMove}\r\n      >\r\n        <ReactCSSTransitionGroup\r\n          transitionLeaveTimeout={500}\r\n          transitionEnterTimeout={300}\r\n          transitionName='fade'\r\n        >\r\n          {this.state.idle ? (\r\n            undefined\r\n          ) : (\r\n            <AppHeader style={{ position: 'absolute', top: 0 }} rightExtra={settingsIcon}/>\r\n          )}\r\n        </ReactCSSTransitionGroup>\r\n        <main\r\n          style={{\r\n            boxSizing: 'border-box',\r\n            height: '100%',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n          }}\r\n        >\r\n          <TypingText\r\n            textAlign={'center'}\r\n            fontColor={palette.textPrimary}\r\n            fontSize={72}\r\n            slogan={this.getSlogan()}\r\n          />\r\n        </main>\r\n      </Root>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  let slogan = getQueryParamsFromUrl('slogan')\r\n  if (slogan) {\r\n    slogan = slogan.replace('||', '\\n')\r\n  }\r\n\r\n  return {\r\n    language: state.settings.language,\r\n    theme: getQueryParamsFromUrl('theme') || state.settings.theme,\r\n    slogan: slogan || state.settings.slogan,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(injectIntl(HomePage))\r\n","export const UPDATE_LANGUAGE = 'UPDATE_LANGUAGE'\r\n\r\nexport const UPDATE_THEME = 'UPDATE_THEME'\r\n\r\nexport const UPDATE_SLOGAN = 'UPDATE_SLOGAN'\r\n","import { UPDATE_LANGUAGE, UPDATE_SLOGAN, UPDATE_THEME } from '../actionTypes'\r\nimport { AnyAction } from 'redux'\r\n\r\nexport const updateLanguage = (language: string): AnyAction => ({\r\n  type: UPDATE_LANGUAGE,\r\n  language,\r\n})\r\n\r\nexport const updateTheme = (theme: string): AnyAction => ({\r\n  type: UPDATE_THEME,\r\n  theme,\r\n})\r\n\r\nexport const updateSlogan = (slogan: string): AnyAction => ({\r\n  type: UPDATE_SLOGAN,\r\n  slogan,\r\n})\r\n","export function hexToRgbA(hex: string, alpha = 1) {\r\n  if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\r\n    let c = hex.substring(1).split('')\r\n    if (c.length === 3) {\r\n      c = [c[0], c[0], c[1], c[1], c[2], c[2]]\r\n    }\r\n    const uc = parseInt('0x' + c.join(''), 16)\r\n\r\n    return `rgba(${[(uc >> 16) & 255, (uc >> 8) & 255, uc & 255].join(',')},${alpha})`\r\n  }\r\n  throw new Error('Bad Hex')\r\n}\r\n","import React, { Component } from 'react'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport styled from 'styled-components'\r\n\r\nconst Title = styled.div`\r\n  padding: 16px 0;\r\n  font-weight: bold;\r\n  font-size: 1.5rem;\r\n`\r\n\r\nexport default class PreferenceGroup extends Component<{\r\n  title?: string | JSX.Element\r\n  titleId?: string\r\n}> {\r\n  render() {\r\n    const { title, titleId, children } = this.props\r\n\r\n    if (titleId !== undefined) {\r\n      return (\r\n        <div>\r\n          <FormattedMessage id={titleId}>{text => <Title>{text}</Title>}</FormattedMessage>\r\n          <div>{children}</div>\r\n        </div>\r\n      )\r\n    }\r\n    return (\r\n      <div>\r\n        <Title>{title}</Title>\r\n        <div>{children}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component, ReactNode } from 'react'\r\nimport { getTheme } from '../theme'\r\nimport { hexToRgbA } from '../utils/colorUtil'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  padding: 16px 0;\r\n  margin-bottom: 16px;\r\n  border: 0 solid;\r\n  border-bottom-width: 1px;\r\n`\r\n\r\ninterface Props {\r\n  title?: string\r\n  titleId?: string\r\n  actionView?: ReactNode\r\n  theme?: string\r\n}\r\n\r\nexport default class PreferenceItem extends Component<Props> {\r\n  render(): ReactNode {\r\n    const { title, titleId, actionView } = this.props\r\n    const itemView = (\r\n      <div style={{ display: 'flex' }}>\r\n        <div style={{ flex: 1 }}>\r\n          {titleId ? <FormattedMessage id={titleId} /> : <span>{title}</span>}\r\n        </div>\r\n        <div style={{ flex: 2 }}>\r\n          <div>{actionView}</div>\r\n        </div>\r\n      </div>\r\n    )\r\n\r\n    return (\r\n      <Container\r\n        style={{\r\n          borderColor: hexToRgbA(getTheme(this.props.theme).textSecondary, 0.2),\r\n        }}\r\n      >\r\n        {itemView}\r\n        {this.props.children}\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { getTheme } from '../../theme'\r\nimport { hexToRgbA } from '../../utils/colorUtil'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport PreferenceGroup from '../../components/preferenceGroup'\r\nimport PreferenceItem from '../../components/preferenceItem'\r\nimport styled from 'styled-components'\r\nimport { AnyAction } from 'redux'\r\n\r\nconst ThemeBlockContainer = styled.div`\r\n  margin: 8px;\r\n  display: inline-block;\r\n  border: 1px solid;\r\n  border-radius: 8px;\r\n  padding: 16px 16px 14px;\r\n  user-select: none;\r\n  cursor: pointer;\r\n  font-size: 1rem;\r\n`\r\n\r\nconst ThemeBlockSelection = styled.div`\r\n  height: 2px;\r\n  margin-top: 2px;\r\n  border-width: 0;\r\n  border-radius: 2px;\r\n`\r\n\r\ninterface Props {\r\n  theme?: string\r\n\r\n  updateTheme(theme: string): AnyAction\r\n}\r\n\r\nclass AppearanceTab extends Component<Props> {\r\n  render() {\r\n    const { theme, updateTheme } = this.props\r\n    if (theme === undefined) {\r\n      updateTheme('light')\r\n    }\r\n    const scheme = getTheme(theme)\r\n    const themeBlock = (titleId: string, value: string) => {\r\n      return (\r\n        <ThemeBlockContainer\r\n          onClick={((handle, v) => () => handle(v))(updateTheme, value)}\r\n          style={{\r\n            borderColor: hexToRgbA(scheme.textSecondary, 0.2),\r\n            color: getTheme(value).textPrimary,\r\n            backgroundColor: getTheme(value).background,\r\n          }}\r\n        >\r\n          <FormattedMessage id={titleId} />\r\n          <ThemeBlockSelection\r\n            style={{\r\n              backgroundColor: value === theme ? scheme.accent : 'transparent',\r\n            }}\r\n          />\r\n        </ThemeBlockContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <FormattedMessage id={'settings.appearance.theme'}>\r\n          {text => (\r\n            <PreferenceGroup title={text}>\r\n              <PreferenceItem>\r\n                <div style={{ width: '100%' }}>\r\n                  {themeBlock('settings.appearance.theme.white', 'white')}\r\n                  {themeBlock('settings.appearance.theme.light', 'light')}\r\n                  {themeBlock('settings.appearance.theme.dark', 'dark')}\r\n                  {themeBlock('settings.appearance.theme.black', 'black')}\r\n                  {themeBlock('settings.appearance.theme.chrome-dark', 'chrome-dark')}\r\n                </div>\r\n              </PreferenceItem>\r\n            </PreferenceGroup>\r\n          )}\r\n        </FormattedMessage>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AppearanceTab\r\n","import React, { Component } from 'react'\r\nimport { getTheme } from '../../theme'\r\nimport PreferenceGroup from '../../components/preferenceGroup'\r\nimport PreferenceItem from '../../components/preferenceItem'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport { AnyAction } from 'redux'\r\nimport styled from 'styled-components'\r\n\r\nconst Select = styled.select`\r\n  font-size: 100%;\r\n  border-radius: 4px;\r\n  font-family: sans-serif;\r\n  line-height: 1.2rem;\r\n  align-items: center;\r\n  padding: 2px;\r\n  display: inline-block;\r\n  text-align: start;\r\n  height: auto;\r\n  border-color: rgb(169, 169, 169);\r\n\r\n  :focus {\r\n    outline-style: none;\r\n  }\r\n`\r\n\r\ninterface Props {\r\n  theme: string\r\n  language: string\r\n\r\n  updateLanguage(theme: string): AnyAction\r\n}\r\n\r\nexport default class LanguageTab extends Component<Props> {\r\n  onSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    this.props.updateLanguage(e.target.value)\r\n  }\r\n\r\n  render() {\r\n    const scheme = getTheme(this.props.theme)\r\n    return (\r\n      <PreferenceGroup titleId={'settings.language'}>\r\n        <PreferenceItem>\r\n          <Select\r\n            style={{\r\n              backgroundColor: scheme.primary,\r\n              color: scheme.textPrimary,\r\n            }}\r\n            value={this.props.language}\r\n            onChange={this.onSelect}\r\n          >\r\n            <FormattedMessage id={'settings.language.default'}>\r\n              {text => <option value=''>{text}</option>}\r\n            </FormattedMessage>\r\n            <option value='zh-Hans'>简体中文</option>\r\n            <option value='zh-Hant'>正體中文</option>\r\n            <option value='en-US'>English</option>\r\n          </Select>\r\n        </PreferenceItem>\r\n      </PreferenceGroup>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { getTheme } from '../../theme'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport PreferenceGroup from '../../components/preferenceGroup'\r\nimport PreferenceItem from '../../components/preferenceItem'\r\nimport packageJson from '../../../package.json'\r\n\r\ninterface Props {\r\n  theme: string\r\n}\r\n\r\nexport default class AboutTab extends Component<Props> {\r\n  render() {\r\n    const { theme } = this.props\r\n    const scheme = getTheme(theme)\r\n    const about = (\r\n      <FormattedMessage id={'settings.about'}>\r\n        {text => (\r\n          <PreferenceGroup title={text}>\r\n            <PreferenceItem>\r\n              <div>\r\n                <span role={'img'} aria-label={'logo'}>\r\n                  💼\r\n                </span>{' '}\r\n                Version {packageJson.version}\r\n              </div>\r\n            </PreferenceItem>\r\n            <PreferenceItem>\r\n              <div>\r\n                <a\r\n                  href={'https://github.com/sorcererXW/iloveworks'}\r\n                  target={'_blank'}\r\n                  rel={'noopener noreferrer'}\r\n                  style={{\r\n                    fontWeight: 'bold',\r\n                    color: scheme.accent,\r\n                  }}\r\n                >\r\n                  Github\r\n                </a>\r\n              </div>\r\n            </PreferenceItem>\r\n            <PreferenceItem>\r\n              <div>\r\n                <a\r\n                  href={'https://github.com/sorcererXW/iloveworks/releases'}\r\n                  target={'_blank'}\r\n                  rel={'noopener noreferrer'}\r\n                  style={{\r\n                    fontWeight: 'bold',\r\n                    color: scheme.accent,\r\n                  }}\r\n                >\r\n                  <FormattedMessage id={'settings.about.release_note'} />\r\n                </a>\r\n              </div>\r\n            </PreferenceItem>\r\n          </PreferenceGroup>\r\n        )}\r\n      </FormattedMessage>\r\n    )\r\n\r\n    return <div>{about}</div>\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { InjectedIntl, defineMessages, FormattedMessage } from 'react-intl'\r\nimport { getTheme } from '../../theme'\r\nimport PreferenceGroup from '../../components/preferenceGroup'\r\nimport PreferenceItem from '../../components/preferenceItem'\r\nimport { MdArrowDropDown, MdArrowDropUp } from 'react-icons/md'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport { AnyAction } from 'redux'\r\nimport { TextareaAutosize } from 'react-autosize-textarea/lib/TextareaAutosize'\r\nimport styled from 'styled-components'\r\n\r\nconst SloganTextarea = styled(TextareaAutosize)`\r\n  font-size: 1.2rem;\r\n  border-radius: 8px;\r\n  width: 100%;\r\n  max-width: 100%;\r\n  box-sizing: border-box;\r\n  padding: 8px 16px;\r\n  line-height: 1.8rem;\r\n  min-height: 10rem;\r\n  resize: none;\r\n  overflow: hidden;\r\n\r\n  :focus {\r\n    outline-style: none;\r\n  }\r\n`\r\n\r\nconst ButtonBar = styled.div`\r\n  display: inline-block;\r\n  margin-top: 16px;\r\n  margin-bottom: 8px;\r\n\r\n  > button {\r\n    margin: 8px;\r\n    font-size: 1rem;\r\n    font-weight: 500;\r\n    padding: 8px 1rem;\r\n    border-radius: 4px;\r\n    border-color: rgba(0, 0, 0, 0);\r\n  }\r\n`\r\n\r\ninterface Props {\r\n  theme: string\r\n  interval: number\r\n  slogan?: string\r\n  intl: InjectedIntl\r\n\r\n  updateSlogan(theme: string): AnyAction\r\n\r\n  updateInterval(theme: number): AnyAction\r\n}\r\n\r\ninterface State {\r\n  text: string\r\n  showSyntax: boolean\r\n}\r\n\r\nexport default class SloganTab extends Component<Props, State> {\r\n  state = {\r\n    text: '',\r\n    showSyntax: false,\r\n  }\r\n\r\n  messages = defineMessages({\r\n    saveSuccess: {\r\n      id: 'action.save.success',\r\n    },\r\n  })\r\n\r\n  componentDidMount() {\r\n    this.setSlogan()\r\n  }\r\n\r\n  setSlogan = () => {\r\n    if (!this.props.slogan || this.props.slogan.trim().length === 0) {\r\n      const messages = defineMessages({\r\n        defaultSlogan: {\r\n          id: 'slogan.default',\r\n        },\r\n      })\r\n      const { intl } = this.props\r\n      this.setState({\r\n        text: intl.formatMessage(messages.defaultSlogan),\r\n      })\r\n    } else {\r\n      this.setState({\r\n        text: this.props.slogan,\r\n      })\r\n    }\r\n  }\r\n\r\n  // @ts-ignore\r\n  onTextChange = e => {\r\n    const text = e.target.value\r\n    if (text === undefined) {\r\n      this.setState({ text: '' })\r\n    } else {\r\n      this.setState({ text })\r\n    }\r\n  }\r\n\r\n  onSave = () => {\r\n    this.props.updateSlogan(this.state.text)\r\n    alert(this.props.intl.formatMessage(this.messages.saveSuccess))\r\n    this.setSlogan()\r\n  }\r\n\r\n  onReset = () => {\r\n    this.props.updateSlogan('')\r\n    this.setSlogan()\r\n  }\r\n\r\n  onSyntaxArrowClick = () => {\r\n    this.setState({ showSyntax: !this.state.showSyntax })\r\n  }\r\n\r\n  render() {\r\n    const { theme } = this.props\r\n    const scheme = getTheme(theme)\r\n\r\n    const customTab = (\r\n      <PreferenceGroup titleId={'settings.slogan.custom'}>\r\n        <PreferenceItem>\r\n          <div>\r\n            <SloganTextarea\r\n              onChange={this.onTextChange}\r\n              value={this.state.text}\r\n              spellCheck={false}\r\n              style={{\r\n                backgroundColor: scheme.primary,\r\n                color: scheme.textPrimary,\r\n              }}\r\n            />\r\n            <div\r\n              style={{\r\n                paddingRight: 16,\r\n                paddingLeft: 16,\r\n                userSelect: 'none',\r\n                color: scheme.textSecondary,\r\n                fontSize: '0.8rem',\r\n              }}\r\n            >\r\n              <div\r\n                onClick={this.onSyntaxArrowClick}\r\n                style={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                }}\r\n              >\r\n                <FormattedMessage id={'settings.slogan.syntax'} />\r\n                {this.state.showSyntax ? (\r\n                  <MdArrowDropUp\r\n                    style={{\r\n                      verticalAlign: 'middle',\r\n                      marginLeft: 4,\r\n                      fontSize: '1rem',\r\n                    }}\r\n                  />\r\n                ) : (\r\n                  <MdArrowDropDown\r\n                    style={{\r\n                      verticalAlign: 'middle',\r\n                      marginLeft: 4,\r\n                      fontSize: '1rem',\r\n                    }}\r\n                  />\r\n                )}\r\n              </div>\r\n              {this.state.showSyntax ? (\r\n                <div>\r\n                  <FormattedMessage id={'settings.slogan.syntax.summary'}>\r\n                    {text => {\r\n                      if (typeof text !== 'string') {\r\n                        return null\r\n                      }\r\n                      return <ReactMarkdown renderers={{ paragraph: 'div' }} source={text} />\r\n                    }}\r\n                  </FormattedMessage>\r\n                </div>\r\n              ) : (\r\n                undefined\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div\r\n            style={{\r\n              width: '100%',\r\n              display: 'flex',\r\n              flexDirection: 'row',\r\n            }}\r\n          >\r\n            <div style={{ flex: 1 }} />\r\n            <ButtonBar className={'button-bar'}>\r\n              <button\r\n                onClick={this.onReset}\r\n                style={{\r\n                  backgroundColor: scheme.primary,\r\n                  color: scheme.textPrimary,\r\n                }}\r\n              >\r\n                <FormattedMessage id={'action.reset'} />\r\n              </button>\r\n              <button\r\n                onClick={this.onSave}\r\n                style={{\r\n                  backgroundColor: scheme.primary,\r\n                  color: scheme.textPrimary,\r\n                }}\r\n              >\r\n                <FormattedMessage id={'action.save'} />\r\n              </button>\r\n            </ButtonBar>\r\n          </div>\r\n        </PreferenceItem>\r\n      </PreferenceGroup>\r\n    )\r\n\r\n    return <div>{customTab}</div>\r\n  }\r\n}\r\n","import Responsive from 'react-responsive'\r\nimport React from 'react'\r\n\r\nexport const Mobile = (props: any) => <Responsive {...props} maxWidth={425} />\r\nexport const Tablet = (props: any) => <Responsive {...props} minWidth={426} maxWidth={768} />\r\nexport const Default = (props: any) => <Responsive {...props} minWidth={769} />\r\n","import React, { Component } from 'react'\r\nimport {\r\n  Link,\r\n  Route,\r\n  Switch,\r\n  NavLink,\r\n  Redirect,\r\n  RouteComponentProps,\r\n  match as Match,\r\n} from 'react-router-dom'\r\nimport { FormattedMessage, injectIntl } from 'react-intl'\r\nimport { connect } from 'react-redux'\r\nimport { updateLanguage, updateTheme, updateSlogan } from '../redux/actions/settingsAction'\r\nimport { getTheme } from '../theme'\r\nimport { hexToRgbA } from '../utils/colorUtil'\r\nimport { Helmet } from 'react-helmet'\r\nimport { MdClose, MdMoreVert } from 'react-icons/md'\r\nimport { AppearanceTab, AboutTab, SloganTab, LanguageTab } from './tabs'\r\nimport styled from 'styled-components'\r\nimport { Dispatch } from 'redux'\r\nimport AppHeader from '../components/appHeader'\r\nimport { Default, Mobile, Tablet } from '../components/responsive'\r\n\r\nconst Root = styled.div`\r\n  min-height: 100vh;\r\n  box-sizing: border-box;\r\n`\r\n\r\nconst Sider = styled.div`\r\n  padding: 16px;\r\n  border: 0 solid;\r\n  border-right-width: 1px;\r\n  height: 100%;\r\n  min-height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  .selected {\r\n    border-radius: 8px;\r\n    background-color: rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    box-sizing: border-box;\r\n    border-right-width: 0;\r\n    flex-direction: row;\r\n    width: 100%;\r\n    height: auto;\r\n    overflow: auto;\r\n\r\n    ::-webkit-scrollbar {\r\n      width: 0 !important;\r\n    }\r\n  }\r\n`\r\n\r\nconst NavItem = styled(NavLink)`\r\n  text-decoration: none;\r\n  padding: 8px 32px 8px 16px;\r\n  margin-bottom: 16px;\r\n  margin-right: 8px;\r\n  font-size: 1rem;\r\n  white-space: pre;\r\n  font-weight: 500;\r\n\r\n  :hover {\r\n    border-radius: 8px;\r\n    background-color: rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  &.active {\r\n    border-radius: 8px;\r\n    background-color: rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    padding: 8px 16px 8px 16px;\r\n    margin-right: 8px;\r\n  }\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  width: 100%;\r\n  padding: 0 16px;\r\n  display: flex;\r\n  box-sizing: border-box;\r\n  flex-direction: column;\r\n`\r\n\r\ninterface Props {\r\n  theme: string\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  language: state.settings.language,\r\n  theme: state.settings.theme,\r\n  slogan: state.settings.slogan,\r\n  interval: state.settings.interval,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  updateLanguage: (language: string) => dispatch(updateLanguage(language)),\r\n  updateTheme: (theme: string) => dispatch(updateTheme(theme)),\r\n  updateSlogan: (slogan: string) => dispatch(updateSlogan(slogan)),\r\n})\r\n\r\nclass SettingsPage extends Component<RouteComponentProps & Props> {\r\n  state = {\r\n    showMenu: true,\r\n  }\r\n\r\n  render() {\r\n    const { match, theme } = this.props\r\n    const palette = getTheme(theme)\r\n\r\n    const meta = (\r\n      <FormattedMessage id='settings'>\r\n        {name => (\r\n          <Helmet>\r\n            <title>{name}</title>\r\n          </Helmet>\r\n        )}\r\n      </FormattedMessage>\r\n    )\r\n\r\n    const renderRedirect = ((m: Match<any>) => () => <Redirect to={`${m.url}/appearance`} />)(match)\r\n\r\n    const content = (\r\n      <ContentContainer>\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path={`${match.url}/slogan`}\r\n            component={connect(\r\n              mapStateToProps,\r\n              mapDispatchToProps,\r\n            )(injectIntl(SloganTab))}\r\n          />\r\n          <Route\r\n            exact\r\n            path={`${match.url}/language`}\r\n            component={connect(\r\n              mapStateToProps,\r\n              mapDispatchToProps,\r\n            )(LanguageTab)}\r\n          />\r\n          <Route\r\n            exact\r\n            path={`${match.url}/appearance`}\r\n            component={connect(\r\n              mapStateToProps,\r\n              mapDispatchToProps,\r\n            )(AppearanceTab)}\r\n          />\r\n          <Route\r\n            exact\r\n            path={`${match.url}/about`}\r\n            component={connect(\r\n              mapStateToProps,\r\n              mapDispatchToProps,\r\n            )(AboutTab)}\r\n          />\r\n          <Route render={renderRedirect} />\r\n        </Switch>\r\n      </ContentContainer>\r\n    )\r\n\r\n    const links = ['appearance', 'slogan', 'language', 'about']\r\n\r\n    const closeIcon = (\r\n      <Link to={'/'}>\r\n        <MdClose\r\n          style={{\r\n            color: palette.textPrimary,\r\n            fontSize: '2em',\r\n            verticalAlign: 'middle',\r\n          }}\r\n        />\r\n      </Link>\r\n    )\r\n\r\n    const moreIcon = (\r\n      <MdMoreVert\r\n        style={{\r\n          color: palette.textPrimary,\r\n          fontSize: '2em',\r\n          verticalAlign: 'middle',\r\n        }}\r\n        onClick={((page, showMenu) => () => page.setState({ showMenu }))(\r\n          this,\r\n          !this.state.showMenu,\r\n        )}\r\n      />\r\n    )\r\n\r\n    const navItems = links.map((link, key) => (\r\n      <NavItem\r\n        key={key}\r\n        activeClassName={'selected'}\r\n        activeStyle={{ color: palette.textPrimary }}\r\n        style={{ color: palette.textSecondary }}\r\n        to={`${match.url}/${link}`}\r\n      >\r\n        <FormattedMessage id={`settings.${link}`} />\r\n      </NavItem>\r\n    ))\r\n\r\n    const desktopView = (\r\n      <Default>\r\n        <main\r\n          style={{\r\n            height: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n          }}\r\n        >\r\n          <Sider\r\n            style={{\r\n              borderColor: hexToRgbA(palette.textSecondary, 0.2),\r\n            }}\r\n          >\r\n            {navItems}\r\n          </Sider>\r\n          {content}\r\n        </main>\r\n      </Default>\r\n    )\r\n\r\n    const tabletView = (\r\n      <Tablet>\r\n        <main\r\n          style={{\r\n            width: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n          }}\r\n        >\r\n          <Sider\r\n            style={{\r\n              borderColor: hexToRgbA(palette.textSecondary, 0.2),\r\n            }}\r\n          >\r\n            {navItems}\r\n          </Sider>\r\n          {content}\r\n        </main>\r\n      </Tablet>\r\n    )\r\n    const mobileView = (\r\n      <Mobile>\r\n        <main\r\n          style={{\r\n            width: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n          }}\r\n        >\r\n          {this.state.showMenu ? (\r\n            <Sider\r\n              style={{\r\n                borderColor: hexToRgbA(palette.textSecondary, 0.2),\r\n                width: '100%',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n              }}\r\n            >\r\n              {navItems}\r\n            </Sider>\r\n          ) : (\r\n            undefined\r\n          )}\r\n          {content}\r\n        </main>\r\n      </Mobile>\r\n    )\r\n    return (\r\n      <Root\r\n        style={{\r\n          backgroundColor: palette.background,\r\n          color: palette.textPrimary,\r\n        }}\r\n      >\r\n        {meta}\r\n        <FormattedMessage id='settings'>\r\n          {title => [\r\n            <Default key={0}>\r\n              <AppHeader title={title} rightExtra={closeIcon} />\r\n            </Default>,\r\n            <Tablet key={1}>\r\n              <AppHeader title={title} leftExtra={closeIcon} />\r\n            </Tablet>,\r\n            <Mobile key={2}>\r\n              <AppHeader title={title} leftExtra={closeIcon} rightExtra={moreIcon} />\r\n            </Mobile>,\r\n          ]}\r\n        </FormattedMessage>\r\n        {desktopView}\r\n        {tabletView}\r\n        {mobileView}\r\n      </Root>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(SettingsPage)\r\n","import I18n from './i18n'\r\n\r\nexport default {\r\n  appName: '织蛾',\r\n\r\n  'slogan.default': `**织蛾**\r\n`,\r\n  'action.ok': '好的',\r\n  'action.save': '保存',\r\n  'action.save.success': '保存成功',\r\n  'action.cancel': '取消',\r\n  'action.reset': '重置',\r\n\r\n  settings: '设置',\r\n  'settings.application': '应用程序',\r\n  'settings.appearance': '界面',\r\n  'settings.language': '语言',\r\n  'settings.language.default': '跟随系统',\r\n  'settings.about': '关于',\r\n  'settings.slogan': '标语',\r\n  'settings.slogan.syntax': '语法说明',\r\n  'settings.slogan.syntax.summary': `一行语句为一段，使用 | 进行段内分行\r\n\r\n另外支持使用部分简单的 Markdown 语法：\r\n\r\n\\`**加粗**\\` ⇨ **加粗**\r\n\r\n\\`*斜体*\\` ⇨ *斜体*\r\n\r\n\\`~~删除~~\\` ⇨ ~~删除~~`,\r\n  'settings.slogan.custom': '自定义标语',\r\n  'settings.slogan.interval': '时间间隔',\r\n  'settings.about.release_note': '更新日志',\r\n  'settings.appearance.theme': '主题',\r\n  'settings.appearance.theme.white': '白 色',\r\n  'settings.appearance.theme.black': '黑 色',\r\n  'settings.appearance.theme.light': '亮 色',\r\n  'settings.appearance.theme.dark': '暗 色',\r\n  'settings.appearance.theme.chrome-dark': 'Chrome(暗)',\r\n} as I18n\r\n","import I18n from './i18n'\r\n\r\nexport default {\r\n  appName: '織蛾',\r\n\r\n  'slogan.default': `織蛾\r\n`,\r\n  'action.ok': '好的',\r\n  'action.save': '保存',\r\n  'action.save.success': '保存成功',\r\n  'action.cancel': '取消',\r\n  'action.reset': '重置',\r\n\r\n  settings: '設置',\r\n  'settings.application': '應用程序',\r\n  'settings.appearance': '界面',\r\n  'settings.language': '語言',\r\n  'settings.language.default': '跟隨系統',\r\n  'settings.about': '關於',\r\n  'settings.slogan': '標語',\r\n  'settings.slogan.syntax': '語法說明',\r\n  'settings.slogan.syntax.summary': `一行語句為一段，使用 | 進行段內分行\r\n\r\n另外支持使用部分簡單的 Markdown 語法：\r\n\r\n\\`**加粗**\\` ⇨ **加粗**\r\n\r\n\\`*斜體*\\` ⇨ *斜體*\r\n\r\n\\`~~刪除~~\\` ⇨ ~~刪除~~`,\r\n  'settings.slogan.custom': '自定義標語',\r\n  'settings.slogan.interval': '時間間隔',\r\n  'settings.about.release_note': '更新日誌',\r\n  'settings.appearance.theme': '主題',\r\n  'settings.appearance.theme.white': '白 色',\r\n  'settings.appearance.theme.black': '黑 色',\r\n  'settings.appearance.theme.light': '亮 色',\r\n  'settings.appearance.theme.dark': '暗 色',\r\n  'settings.appearance.theme.chrome-dark': 'Chrome(暗)',\r\n} as I18n\r\n","import I18n from './i18n'\r\n\r\nexport default {\r\n  appName: 'moth',\r\n\r\n  'slogan.default': `moth\r\n`,\r\n  'action.ok': 'OK',\r\n  'action.save': 'Save',\r\n  'action.save.success': 'Saved successfully',\r\n  'action.cancel': 'Cancel',\r\n  'action.reset': 'Reset',\r\n\r\n  settings: 'Settings',\r\n  'settings.application': 'Application',\r\n  'settings.appearance': 'Appearance',\r\n  'settings.language': 'Language',\r\n  'settings.language.default': 'Default',\r\n  'settings.about': 'About',\r\n  'settings.slogan': 'Slogan',\r\n  'settings.slogan.syntax': 'Syntax description',\r\n  'settings.slogan.syntax.summary': `\r\nOne line statement is a paragraph, use '|' to perform line break\r\n\r\nAnd you can use some basic Markdown inline syntax:\r\n\r\n\\`**Bold**\\` ⇨ **Bold**\r\n\r\n\\`*Italic*\\` ⇨ *Italic*\r\n\r\n\\`~~Delete~~\\` ⇨ ~~Delete~~`,\r\n  'settings.slogan.custom': 'Custom slogan',\r\n  'settings.slogan.interval': 'Interval',\r\n  'settings.about.release_note': 'Release Notes',\r\n  'settings.appearance.theme': 'Theme',\r\n  'settings.appearance.theme.white': 'White',\r\n  'settings.appearance.theme.black': 'Black',\r\n  'settings.appearance.theme.light': 'Light',\r\n  'settings.appearance.theme.dark': 'Dark',\r\n  'settings.appearance.theme.chrome-dark': 'Chrome Dark',\r\n} as I18n\r\n","import zhHans from './zhHans'\r\nimport zhHant from './zhHant'\r\nimport enUS from './enUS'\r\nimport I18n from './i18n'\r\n\r\nexport function getLocale(language: string): I18n {\r\n  let target = language\r\n  if (!target) {\r\n    // @ts-ignore\r\n    target = navigator.userLanguage || navigator.language\r\n  }\r\n  switch (target.toLocaleLowerCase()) {\r\n    case 'zh':\r\n    case 'zh-hans':\r\n    case 'zh-cn':\r\n      return zhHans\r\n    case 'zh-hk':\r\n    case 'zh-tw':\r\n    case 'zh-mo':\r\n    case 'zh-sg':\r\n    case 'zh-hant':\r\n      return zhHant\r\n    default:\r\n      return enUS\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom'\r\n\r\nimport HomePage from './containers/homePage'\r\nimport SettingsPage from './containers/settingsPage'\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport { getLocale } from './locale'\r\n\r\nimport { addLocaleData, FormattedMessage, IntlProvider } from 'react-intl'\r\nimport zh from 'react-intl/locale-data/zh'\r\nimport en from 'react-intl/locale-data/en'\r\nimport { Helmet } from 'react-helmet'\r\n\r\nimport { getTheme } from './theme'\r\nimport { getQueryParamsFromUrl } from './utils/urlUtil'\r\n\r\naddLocaleData([...en, ...zh])\r\n\r\ninterface Props {\r\n  theme: string\r\n  language: string\r\n}\r\n\r\nclass App extends Component<Props> {\r\n  render() {\r\n    const theme = this.props.theme\r\n    const scheme = getTheme(theme)\r\n\r\n    const meta = (\r\n      <FormattedMessage id={'appName'}>\r\n        {appName => (\r\n          <Helmet>\r\n            <meta charSet='utf-8' />\r\n            <title>{appName}</title>\r\n            <meta name='theme-color' content={scheme.background} />\r\n          </Helmet>\r\n        )}\r\n      </FormattedMessage>\r\n    )\r\n\r\n    const route = (\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path={'/'} component={HomePage} />\r\n          <Route path={'/settings'} component={SettingsPage} />\r\n          <Route render={(() => () => <Redirect to={'/'} />)()} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    )\r\n\r\n    return (\r\n      <IntlProvider locale={navigator.language} messages={getLocale(this.props.language)}>\r\n        <div>\r\n          {meta}\r\n          {route}\r\n        </div>\r\n      </IntlProvider>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    language: getQueryParamsFromUrl('lang') || state.settings.language,\r\n    theme: state.settings.theme,\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null,\r\n)(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?(registration: ServiceWorkerRegistration): void\r\n  onUpdate?(registration: ServiceWorkerRegistration): void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href,\r\n    )\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker === null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType !== null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import * as types from '../actionTypes'\r\nimport { AnyAction } from 'redux'\r\n\r\nconst initialState = {}\r\n\r\nexport function SettingsReducer(state = initialState, action: AnyAction) {\r\n  switch (action.type) {\r\n    case types.UPDATE_LANGUAGE:\r\n      return {\r\n        ...state,\r\n        language: action.language,\r\n      }\r\n    case types.UPDATE_THEME:\r\n      return {\r\n        ...state,\r\n        theme: action.theme,\r\n      }\r\n    case types.UPDATE_SLOGAN:\r\n      return {\r\n        ...state,\r\n        slogan: action.slogan,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\n\r\nimport { SettingsReducer } from './settingsReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  settings: SettingsReducer,\r\n})\r\n\r\nexport default rootReducer\r\n","import { applyMiddleware, createStore } from 'redux'\r\nimport * as actionCreators from './actions/settingsAction'\r\nimport logger from 'redux-logger'\r\nimport { persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport rootReducer from './reducers/index'\r\n\r\nconst middlewares = [logger]\r\nconst createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore)\r\n\r\nconst enhancer =\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({ actionCreators })\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n}\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nexport default function configureStore() {\r\n  return createStoreWithMiddleware(persistedReducer, enhancer)\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './app'\r\nimport * as ServiceWorker from './utils/registerServiceWorker'\r\nimport configureStore from './redux/configureStore'\r\nimport { Provider } from 'react-redux'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport { persistStore } from 'redux-persist'\r\n\r\nconst store = configureStore()\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate persistor={persistStore(store)}>\r\n      <App />\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n)\r\n\r\nServiceWorker.register()\r\n"],"sourceRoot":""}