{"version":3,"sources":["components/shiftTextComponent.tsx","theme/themes.ts","theme/index.ts","components/appHeader.tsx","utils/urlUtil.ts","containers/homePage.tsx","redux/actionTypes.ts","redux/actions/settingsAction.ts","utils/colorUtil.ts","components/preferenceGroup.tsx","components/preferenceItem.tsx","containers/tabs/appearanceTab.tsx","containers/tabs/languageTab.tsx","containers/tabs/aboutTab.tsx","containers/tabs/sloganTab.tsx","components/responsive.tsx","containers/settingsPage.tsx","locale/zhHans.ts","locale/zhHant.ts","locale/enUS.ts","locale/index.ts","app.tsx","utils/registerServiceWorker.ts","redux/reducers/settingsReducer.ts","redux/reducers/index.ts","redux/configureStore.ts","index.tsx"],"names":["ShiftTextComponent","index","state","displayText","updateIndex","slogan","_this","props","undefined","setState","length","setTimeout","interval","timer","this","setInterval","clearInterval","split","display","i","push","react_default","a","createElement","key","react_markdown_default","renderers","paragraph","allowedTypes","source","style","userSelect","textAlign","fontSize","color","fontColor","react_addons_css_transition_group_default","transitionLeaveTimeout","transitionEnterTimeout","transitionName","Component","defaultProps","White","primary","primaryDark","background","accent","textPrimary","textSecondary","Light","Dark","Black","ChromeDark","getTheme","theme","toLowerCase","Container","styled","div","_templateObject","Title","h1","_templateObject2","AppHeader","_this$props","title","leftExtra","rightExtra","Object","objectSpread","width","marginRight","flex","marginLeft","getQueryParamsFromUrl","query","URLSearchParams","window","location","search","get","Root","homePage_templateObject","HomePage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getSlogan","trim","messages","defineMessages","defaultSlogan","id","intl","formatMessage","map","item","filter","mouseCountdown","handleMouseMove","idle","clearTimeout","palette","settingsIcon","react_router_dom","to","index_esm","cursor","alignItems","justifyContent","onMouseMove","appHeader","position","top","boxSizing","height","shiftTextComponent","connect","replace","language","settings","injectIntl","UPDATE_LANGUAGE","UPDATE_THEME","UPDATE_SLOGAN","updateLanguage","type","updateTheme","updateSlogan","hexToRgbA","hex","alpha","arguments","test","c","substring","uc","parseInt","join","concat","Error","preferenceGroup_templateObject","PreferenceGroup","titleId","children","index_es","text","preferenceGroup_Title","preferenceItem_templateObject","PreferenceItem","actionView","itemView","preferenceItem_Container","borderColor","ThemeBlockContainer","appearanceTab_templateObject","ThemeBlockSelection","appearanceTab_templateObject2","AppearanceTab","scheme","themeBlock","value","onClick","handle","v","backgroundColor","preferenceGroup_PreferenceGroup","preferenceItem_PreferenceItem","Select","select","languageTab_templateObject","LanguageTab","onSelect","e","target","onChange","AboutTab","about","role","aria-label","packageJson","version","href","rel","fontWeight","SloganTextarea","TextareaAutosize","sloganTab_templateObject","ButtonBar","sloganTab_templateObject2","SloganTab","showSyntax","saveSuccess","setSlogan","onTextChange","onSave","alert","onReset","onSyntaxArrowClick","customTab","spellCheck","paddingRight","paddingLeft","verticalAlign","flexDirection","className","Mobile","react_responsive_default","assign","maxWidth","Tablet","minWidth","Default","settingsPage_templateObject","Sider","settingsPage_templateObject2","NavItem","NavLink","_templateObject3","ContentContainer","_templateObject4","mapStateToProps","mapDispatchToProps","dispatch","SettingsPage","showMenu","m","page","match","meta","name","Helmet","renderRedirect","react_router","url","content","exact","path","component","render","closeIcon","moreIcon","navItems","link","activeClassName","activeStyle","desktopView","responsive_Default","tabletView","responsive_Tablet","mobileView","responsive_Mobile","settingsPage_Root","zhHans","appName","slogan.default","action.ok","action.save","action.save.success","action.cancel","action.reset","settings.application","settings.appearance","settings.language","settings.language.default","settings.about","settings.slogan","settings.slogan.syntax","settings.slogan.syntax.summary","settings.slogan.custom","settings.slogan.interval","settings.about.release_note","settings.appearance.theme","settings.appearance.theme.white","settings.appearance.theme.black","settings.appearance.theme.light","settings.appearance.theme.dark","settings.appearance.theme.chrome-dark","zhHant","enUS","getLocale","navigator","userLanguage","toLocaleLowerCase","addLocaleData","toConsumableArray","en","zh","App","charSet","route","locale","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","initialState","rootReducer","combineReducers","action","types","middlewares","logger","createStoreWithMiddleware","applyMiddleware","apply","createStore","enhancer","__REDUX_DEVTOOLS_EXTENSION__","actionCreators","persistConfig","storage","persistedReducer","persistReducer","store","ReactDOM","es","integration_react","persistor","persistStore","app","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker","ServiceWorker"],"mappings":"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","file":"static/js/main.c737b675.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group'\nimport { ColorProperty, TextAlignProperty } from 'csstype'\n\ninterface Props {\n  slogan?: string[],\n  interval: number,\n  fontColor: ColorProperty,\n  fontSize: number,\n  textAlign: TextAlignProperty\n}\n\nclass ShiftTextComponent extends Component<Props> {\n  static defaultProps = {\n    fontSize: 64,\n    fontColor: '#000',\n    textAlign: 'left',\n    slogan: [],\n    interval: 3,\n  }\n\n  index = 0\n\n  state = {\n    displayText: '',\n  }\n\n  updateIndex = () => {\n    const slogan = this.props.slogan\n    if (slogan === undefined) {\n      this.setState({\n        displayText: '',\n      })\n    } else {\n      if (this.index >= slogan.length * 2) {\n        this.index = 0\n      }\n      if (this.index % 2 === 1) {\n        this.setState({\n          displayText: '',\n        })\n        setTimeout(() => this.updateIndex(), this.props.interval * 1000 * 0.2)\n      } else {\n        this.setState({\n          displayText: slogan[this.index / 2],\n        })\n      }\n      this.index++\n    }\n  }\n\n  timer: number | undefined = undefined\n\n  componentDidMount() {\n    this.updateIndex()\n    this.timer = setInterval(this.updateIndex, this.props.interval * 1000)\n  }\n\n  componentWillUnmount() {\n    if (this.timer !== undefined) {\n      clearInterval(this.timer)\n    }\n  }\n\n  render() {\n    const split = this.state.displayText ? this.state.displayText.split('|') : []\n    const display = []\n    for (let i = 0; i < split.length; i++) {\n      if (i > 0) {\n        display.push(<br key={i * 2 - 1}/>)\n      }\n      display.push(\n        <ReactMarkdown\n          key={i * 2}\n          renderers={{ paragraph: 'span' }}\n          allowedTypes={[\n            'root', 'paragraph', 'emphasis',\n            'strong', 'delete', 'link', 'linkReference',\n            'text',\n          ]}\n          source={split[i]}/>,\n      )\n    }\n    return (\n      <div style={{\n        userSelect: 'none',\n        textAlign: this.props.textAlign,\n        fontSize: this.props.fontSize,\n        color: this.props.fontColor,\n      }}>\n        <ReactCSSTransitionGroup\n          transitionLeaveTimeout={this.props.interval * 1000 * 0.2}\n          transitionEnterTimeout={this.props.interval * 1000 * 0.2}\n          transitionName='fade'>\n          {display}\n        </ReactCSSTransitionGroup>\n      </div>\n    )\n  }\n}\n\nexport default ShiftTextComponent\n","import { Theme } from './index'\r\n\r\nexport const White = {\r\n  primary: '#fff',\r\n  primaryDark: '#fff',\r\n  background: '#fff',\r\n  accent: '#000',\r\n  textPrimary: '#000',\r\n  textSecondary: '#757575',\r\n} as Theme\r\n\r\nexport const Light = {\r\n  primary: '#fefefe',\r\n  primaryDark: '#f5f5f5',\r\n  background: '#F5F5F5',\r\n  accent: '#000',\r\n  textPrimary: '#212121',\r\n  textSecondary: '#9E9E9E',\r\n} as Theme\r\n\r\nexport const Dark = {\r\n  primary: '#323639',\r\n  primaryDark: '#282c2f',\r\n  background: '#303030',\r\n  accent: '#fff',\r\n  textPrimary: '#fafafa',\r\n  textSecondary: '#d6d6d6',\r\n} as Theme\r\n\r\nexport const Black = {\r\n  primary: '#1c2226',\r\n  primaryDark: '#1b2024',\r\n  background: '#000',\r\n  accent: '#fff',\r\n  textPrimary: '#fff',\r\n  textSecondary: '#a0a0a1',\r\n} as Theme\r\n\r\nexport const ChromeDark = {\r\n  primary: '#333639',\r\n  primaryDark: '#292c2f',\r\n  background: '#202124',\r\n  accent: '#fff',\r\n  textPrimary: '#f1f3f4',\r\n  textSecondary: '#9ba0a5',\r\n} as Theme\r\n","import { Black, Dark, White, Light, ChromeDark } from './themes'\r\nimport { ColorProperty } from 'csstype'\r\n\r\nexport interface Theme {\r\n  primary: ColorProperty\r\n  primaryDark: ColorProperty\r\n  background: ColorProperty\r\n  accent: ColorProperty\r\n  textPrimary: ColorProperty\r\n  textSecondary: ColorProperty\r\n}\r\n\r\nexport function getTheme(theme?: string): Theme {\r\n  switch (theme ? theme.toLowerCase() : '') {\r\n    case 'light':\r\n      return Light\r\n    case 'dark':\r\n      return Dark\r\n    case 'white':\r\n      return White\r\n    case 'black':\r\n      return Black\r\n    case 'chrome-dark':\r\n      return ChromeDark\r\n    default:\r\n      return Light\r\n  }\r\n}\r\n","import React, { Component, CSSProperties, ReactNode } from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  box-sizing: border-box;\n  height: 64px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 48px 16px;\n`\n\nconst Title = styled.h1`\n  padding: 0;\n  margin: 0;\n`\n\nclass AppHeader extends Component<{\n  title?: string | JSX.Element,\n  rightExtra?: ReactNode\n  leftExtra?: ReactNode\n  style?: CSSProperties\n}> {\n  render() {\n    const { title, leftExtra, rightExtra } = this.props\n    return (\n      <header style={{\n        width: '100%',\n        ...this.props.style,\n      }}>\n        <Container>\n          {\n            leftExtra === undefined ? undefined :\n              <div style={{ marginRight: 16, }}>\n                {leftExtra}\n              </div>\n          }\n          <Title>{title}</Title>\n          <div style={{ flex: 1 }}/>\n          {\n            rightExtra === undefined ? undefined :\n              <div style={{ marginLeft: 16 }}>\n                {rightExtra}\n              </div>\n          }\n        </Container>\n      </header>\n    )\n  }\n}\n\nexport default AppHeader\n","export const getQueryParamsFromUrl = (query: string): string | null => {\r\n  return new URLSearchParams(window.location.search).get(query)\r\n}\r\n","import React, { Component } from 'react'\nimport ShiftTextComponent from '../components/shiftTextComponent'\nimport './homePage.css'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { getTheme } from '../theme'\nimport { InjectedIntl, defineMessages, injectIntl } from 'react-intl'\nimport AppHeader from '../components/appHeader'\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group'\nimport { MdSettings } from 'react-icons/md'\nimport styled from 'styled-components'\nimport { getQueryParamsFromUrl } from '../utils/urlUtil'\n\nconst Root = styled.div`\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n\n  @media (max-width: 768px) {\n    padding-top: 0;\n    padding-left: 0;\n    padding-right: 0;\n  }\n`\n\ninterface Props {\n  slogan: string\n  intl: InjectedIntl\n  theme: string\n}\n\ninterface State {\n  idle: boolean\n}\n\nclass HomePage extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      idle: true,\n    }\n  }\n\n  getSlogan = (): string[] => {\n    let slogan = this.props.slogan\n    if (!this.props.slogan || this.props.slogan.trim().length === 0) {\n      const messages = defineMessages({\n        defaultSlogan: {\n          id: 'slogan.default',\n        },\n      })\n      const { intl } = this.props\n      slogan = intl.formatMessage(messages.defaultSlogan)\n    }\n\n    return slogan.split('\\n')\n      .map(item => item.trim())\n      .filter(item => item.length > 0)\n  }\n\n  mouseCountdown: number | undefined = undefined\n\n  handleMouseMove = () => {\n    if (this.state.idle) {\n      this.setState({\n        idle: false,\n      })\n    }\n    if (this.mouseCountdown !== undefined) {\n      window.clearTimeout(this.mouseCountdown)\n      this.mouseCountdown = undefined\n    }\n    this.mouseCountdown = window.setTimeout(\n      () => this.setState({\n        idle: true,\n      }), 2000)\n  }\n\n  componentWillUnmount() {\n    if (this.mouseCountdown !== undefined) {\n      window.clearTimeout(this.mouseCountdown)\n      this.mouseCountdown = undefined\n    }\n  }\n\n  render() {\n    const palette = getTheme(this.props.theme)\n\n    const settingsIcon = (\n      <Link to={'/settings'}>\n        <h1><MdSettings\n          style={{\n            color: palette.textSecondary,\n            cursor: 'pointer',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}/></h1>\n      </Link>\n    )\n    return (\n      <Root\n        style={{\n          background: palette.background,\n          cursor: this.state.idle ? 'none' : 'default',\n        }}\n        onMouseMove={this.handleMouseMove}>\n        <ReactCSSTransitionGroup\n          transitionLeaveTimeout={500}\n          transitionEnterTimeout={300}\n          transitionName='fade'>\n          {this.state.idle ? undefined :\n            <AppHeader\n              style={{ position: 'absolute', top: 0, }}\n              rightExtra={settingsIcon}/>\n          }\n        </ReactCSSTransitionGroup>\n        <main style={{\n          boxSizing: 'border-box',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}>\n          <ShiftTextComponent\n            textAlign={'center'}\n            fontColor={palette.textPrimary}\n            fontSize={72}\n            slogan={this.getSlogan()}\n          />\n        </main>\n      </Root>\n    )\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  let slogan = getQueryParamsFromUrl('slogan')\n  if (slogan) {\n    slogan = slogan.replace('||', '\\n')\n  }\n\n  return {\n    language: state.settings.language,\n    theme: getQueryParamsFromUrl('theme') || state.settings.theme,\n    slogan: slogan || state.settings.slogan,\n  }\n}\n\nexport default connect(mapStateToProps)(injectIntl(HomePage))\n","export const UPDATE_LANGUAGE = 'UPDATE_LANGUAGE'\r\n\r\nexport const UPDATE_THEME = 'UPDATE_THEME'\r\n\r\nexport const UPDATE_SLOGAN = 'UPDATE_SLOGAN'\r\n","import { UPDATE_LANGUAGE, UPDATE_SLOGAN, UPDATE_THEME } from '../actionTypes'\r\nimport { AnyAction } from 'redux'\r\n\r\nexport const updateLanguage = (language: string): AnyAction => ({\r\n  type: UPDATE_LANGUAGE,\r\n  language,\r\n})\r\n\r\nexport const updateTheme = (theme: string): AnyAction => ({\r\n  type: UPDATE_THEME,\r\n  theme,\r\n})\r\n\r\nexport const updateSlogan = (slogan: string): AnyAction => ({\r\n  type: UPDATE_SLOGAN,\r\n  slogan,\r\n})\r\n","export function hexToRgbA(hex: string, alpha = 1) {\r\n  if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\r\n    let c = hex.substring(1).split('')\r\n    if (c.length === 3) {\r\n      c = [c[0], c[0], c[1], c[1], c[2], c[2]]\r\n    }\r\n    const uc = parseInt('0x' + c.join(''), 16)\r\n\r\n    return `rgba(${[(uc >> 16) & 255, (uc >> 8) & 255, uc & 255].join(',')},${alpha})`\r\n  }\r\n  throw new Error('Bad Hex')\r\n}\r\n","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport styled from 'styled-components'\n\nconst Title = styled.div`\n  padding: 16px 0;\n  font-weight: bold;\n  font-size: 1.5rem;\n`\n\nexport default class PreferenceGroup extends Component<{\n  title?: string | JSX.Element,\n  titleId?: string\n}> {\n  render() {\n    const { title, titleId, children } = this.props\n\n    if (titleId !== undefined) {\n      return (\n        <div>\n          <FormattedMessage id={titleId}>\n            {text => <Title>{text}</Title>}\n          </FormattedMessage>\n          <div>\n            {children}\n          </div>\n        </div>\n      )\n    }\n    return (\n      <div>\n        <Title>{title}</Title>\n        <div>\n          {children}\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component, ReactNode } from 'react'\nimport { getTheme } from '../theme'\nimport { hexToRgbA } from '../utils/colorUtil'\nimport { FormattedMessage } from 'react-intl'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  padding: 16px 0;\n  margin-bottom: 16px;\n  border: 0 solid;\n  border-bottom-width: 1px;\n`\n\ninterface Props {\n  title?: string,\n  titleId?: string,\n  actionView?: ReactNode\n  theme?: string\n}\n\nexport default class PreferenceItem extends Component<Props> {\n  render(): ReactNode {\n    const { title, titleId, actionView } = this.props\n    const itemView = (\n      <div style={{ display: 'flex' }}>\n        <div style={{ flex: 1 }}>\n          {\n            titleId ?\n              <FormattedMessage id={titleId}/> :\n              <span>{title}</span>\n          }\n        </div>\n        <div style={{ flex: 2 }}>\n          <div>{actionView}</div>\n        </div>\n      </div>\n    )\n\n    return (\n      <Container style={{\n        borderColor: hexToRgbA(getTheme(this.props.theme).textSecondary, 0.2),\n      }}>\n        {itemView}\n        {this.props.children}\n      </Container>\n    )\n  }\n}\n","import React, { Component } from 'react'\r\nimport { getTheme } from '../../theme'\r\nimport { hexToRgbA } from '../../utils/colorUtil'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport PreferenceGroup from '../../components/preferenceGroup'\r\nimport PreferenceItem from '../../components/preferenceItem'\r\nimport styled from 'styled-components'\r\nimport { AnyAction } from 'redux'\r\n\r\nconst ThemeBlockContainer = styled.div`\r\n  margin: 8px;\r\n  display: inline-block;\r\n  border: 1px solid;\r\n  border-radius: 8px;\r\n  padding: 16px 16px 14px;\r\n  user-select: none;\r\n  cursor: pointer;\r\n  font-size: 1rem;\r\n`\r\n\r\nconst ThemeBlockSelection = styled.div`\r\n  height: 2px;\r\n  margin-top: 2px;\r\n  border-width: 0;\r\n  border-radius: 2px;\r\n`\r\n\r\ninterface Props {\r\n  theme?: string\r\n\r\n  updateTheme(theme: string): AnyAction\r\n}\r\n\r\nclass AppearanceTab extends Component<Props> {\r\n  render() {\r\n    const { theme, updateTheme } = this.props\r\n    if (theme === undefined) {\r\n      updateTheme('light')\r\n    }\r\n    const scheme = getTheme(theme)\r\n    const themeBlock = (titleId: string, value: string) => {\r\n      return (\r\n        <ThemeBlockContainer\r\n          onClick={((handle, v) => () => handle(v))(updateTheme, value)}\r\n          style={{\r\n            borderColor: hexToRgbA(scheme.textSecondary, 0.2),\r\n            color: getTheme(value).textPrimary,\r\n            backgroundColor: getTheme(value).background,\r\n          }}\r\n        >\r\n          <FormattedMessage id={titleId} />\r\n          <ThemeBlockSelection\r\n            style={{\r\n              backgroundColor: value === theme ? scheme.accent : 'transparent',\r\n            }}\r\n          />\r\n        </ThemeBlockContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <FormattedMessage id={'settings.appearance.theme'}>\r\n          {text => (\r\n            <PreferenceGroup title={text}>\r\n              <PreferenceItem>\r\n                <div style={{ width: '100%' }}>\r\n                  {themeBlock('settings.appearance.theme.white', 'white')}\r\n                  {themeBlock('settings.appearance.theme.light', 'light')}\r\n                  {themeBlock('settings.appearance.theme.dark', 'dark')}\r\n                  {themeBlock('settings.appearance.theme.black', 'black')}\r\n                  {themeBlock('settings.appearance.theme.chrome-dark', 'chrome-dark')}\r\n                </div>\r\n              </PreferenceItem>\r\n            </PreferenceGroup>\r\n          )}\r\n        </FormattedMessage>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AppearanceTab\r\n","import React, { Component } from 'react'\r\nimport { getTheme } from '../../theme'\r\nimport PreferenceGroup from '../../components/preferenceGroup'\r\nimport PreferenceItem from '../../components/preferenceItem'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport { AnyAction } from 'redux'\r\nimport styled from 'styled-components'\r\n\r\nconst Select = styled.select`\r\n  font-size: 100%;\r\n  border-radius: 4px;\r\n  font-family: sans-serif;\r\n  line-height: 1.2rem;\r\n  align-items: center;\r\n  padding: 2px;\r\n  display: inline-block;\r\n  text-align: start;\r\n  height: auto;\r\n  border-color: rgb(169, 169, 169);\r\n\r\n  :focus {\r\n    outline-style: none;\r\n  }\r\n`\r\n\r\ninterface Props {\r\n  theme: string\r\n  language: string\r\n\r\n  updateLanguage(theme: string): AnyAction\r\n}\r\n\r\nexport default class LanguageTab extends Component<Props> {\r\n  onSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    this.props.updateLanguage(e.target.value)\r\n  }\r\n\r\n  render() {\r\n    const scheme = getTheme(this.props.theme)\r\n    return (\r\n      <PreferenceGroup titleId={'settings.language'}>\r\n        <PreferenceItem>\r\n          <Select\r\n            style={{\r\n              backgroundColor: scheme.primary,\r\n              color: scheme.textPrimary,\r\n            }}\r\n            value={this.props.language}\r\n            onChange={this.onSelect}\r\n          >\r\n            <FormattedMessage id={'settings.language.default'}>\r\n              {text => <option value=''>{text}</option>}\r\n            </FormattedMessage>\r\n            <option value='zh-Hans'>简体中文</option>\r\n            <option value='zh-Hant'>正體中文</option>\r\n            <option value='en-US'>English</option>\r\n          </Select>\r\n        </PreferenceItem>\r\n      </PreferenceGroup>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { getTheme } from '../../theme'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport PreferenceGroup from '../../components/preferenceGroup'\r\nimport PreferenceItem from '../../components/preferenceItem'\r\nimport packageJson from '../../../package.json'\r\n\r\ninterface Props {\r\n  theme: string\r\n}\r\n\r\nexport default class AboutTab extends Component<Props> {\r\n  render() {\r\n    const { theme } = this.props\r\n    const scheme = getTheme(theme)\r\n    const about = (\r\n      <FormattedMessage id={'settings.about'}>\r\n        {text => (\r\n          <PreferenceGroup title={text}>\r\n            <PreferenceItem>\r\n              <div>\r\n                <span role={'img'} aria-label={'logo'}>\r\n                  💼\r\n                </span>{' '}\r\n                Version {packageJson.version}\r\n              </div>\r\n            </PreferenceItem>\r\n            <PreferenceItem>\r\n              <div>\r\n                <a\r\n                  href={'https://github.com/sorcererXW/iloveworks'}\r\n                  target={'_blank'}\r\n                  rel={'noopener noreferrer'}\r\n                  style={{\r\n                    fontWeight: 'bold',\r\n                    color: scheme.accent,\r\n                  }}\r\n                >\r\n                  Github\r\n                </a>\r\n              </div>\r\n            </PreferenceItem>\r\n            <PreferenceItem>\r\n              <div>\r\n                <a\r\n                  href={'https://github.com/sorcererXW/iloveworks/releases'}\r\n                  target={'_blank'}\r\n                  rel={'noopener noreferrer'}\r\n                  style={{\r\n                    fontWeight: 'bold',\r\n                    color: scheme.accent,\r\n                  }}\r\n                >\r\n                  <FormattedMessage id={'settings.about.release_note'} />\r\n                </a>\r\n              </div>\r\n            </PreferenceItem>\r\n          </PreferenceGroup>\r\n        )}\r\n      </FormattedMessage>\r\n    )\r\n\r\n    return <div>{about}</div>\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { InjectedIntl, defineMessages, FormattedMessage } from 'react-intl'\r\nimport { getTheme } from '../../theme'\r\nimport PreferenceGroup from '../../components/preferenceGroup'\r\nimport PreferenceItem from '../../components/preferenceItem'\r\nimport { MdArrowDropDown, MdArrowDropUp } from 'react-icons/md'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport { AnyAction } from 'redux'\r\nimport { TextareaAutosize } from 'react-autosize-textarea/lib/TextareaAutosize'\r\nimport styled from 'styled-components'\r\n\r\nconst SloganTextarea = styled(TextareaAutosize)`\r\n  font-size: 1.2rem;\r\n  border-radius: 8px;\r\n  width: 100%;\r\n  max-width: 100%;\r\n  box-sizing: border-box;\r\n  padding: 8px 16px;\r\n  line-height: 1.8rem;\r\n  min-height: 10rem;\r\n  resize: none;\r\n  overflow: hidden;\r\n\r\n  :focus {\r\n    outline-style: none;\r\n  }\r\n`\r\n\r\nconst ButtonBar = styled.div`\r\n  display: inline-block;\r\n  margin-top: 16px;\r\n  margin-bottom: 8px;\r\n\r\n  > button {\r\n    margin: 8px;\r\n    font-size: 1rem;\r\n    font-weight: 500;\r\n    padding: 8px 1rem;\r\n    border-radius: 4px;\r\n    border-color: rgba(0, 0, 0, 0);\r\n  }\r\n`\r\n\r\ninterface Props {\r\n  theme: string\r\n  interval: number\r\n  slogan?: string\r\n  intl: InjectedIntl\r\n\r\n  updateSlogan(theme: string): AnyAction\r\n\r\n  updateInterval(theme: number): AnyAction\r\n}\r\n\r\ninterface State {\r\n  text: string\r\n  showSyntax: boolean\r\n}\r\n\r\nexport default class SloganTab extends Component<Props, State> {\r\n  state = {\r\n    text: '',\r\n    showSyntax: false,\r\n  }\r\n\r\n  messages = defineMessages({\r\n    saveSuccess: {\r\n      id: 'action.save.success',\r\n    },\r\n  })\r\n\r\n  componentDidMount() {\r\n    this.setSlogan()\r\n  }\r\n\r\n  setSlogan = () => {\r\n    if (!this.props.slogan || this.props.slogan.trim().length === 0) {\r\n      const messages = defineMessages({\r\n        defaultSlogan: {\r\n          id: 'slogan.default',\r\n        },\r\n      })\r\n      const { intl } = this.props\r\n      this.setState({\r\n        text: intl.formatMessage(messages.defaultSlogan),\r\n      })\r\n    } else {\r\n      this.setState({\r\n        text: this.props.slogan,\r\n      })\r\n    }\r\n  }\r\n\r\n  // @ts-ignore\r\n  onTextChange = e => {\r\n    const text = e.target.value\r\n    if (text === undefined) {\r\n      this.setState({ text: '' })\r\n    } else {\r\n      this.setState({ text })\r\n    }\r\n  }\r\n\r\n  onSave = () => {\r\n    this.props.updateSlogan(this.state.text)\r\n    alert(this.props.intl.formatMessage(this.messages.saveSuccess))\r\n    this.setSlogan()\r\n  }\r\n\r\n  onReset = () => {\r\n    this.props.updateSlogan('')\r\n    this.setSlogan()\r\n  }\r\n\r\n  onSyntaxArrowClick = () => {\r\n    this.setState({ showSyntax: !this.state.showSyntax })\r\n  }\r\n\r\n  render() {\r\n    const { theme } = this.props\r\n    const scheme = getTheme(theme)\r\n\r\n    const customTab = (\r\n      <PreferenceGroup titleId={'settings.slogan.custom'}>\r\n        <PreferenceItem>\r\n          <div>\r\n            <SloganTextarea\r\n              onChange={this.onTextChange}\r\n              value={this.state.text}\r\n              spellCheck={false}\r\n              style={{\r\n                backgroundColor: scheme.primary,\r\n                color: scheme.textPrimary,\r\n              }}\r\n            />\r\n            <div\r\n              style={{\r\n                paddingRight: 16,\r\n                paddingLeft: 16,\r\n                userSelect: 'none',\r\n                color: scheme.textSecondary,\r\n                fontSize: '0.8rem',\r\n              }}\r\n            >\r\n              <div\r\n                onClick={this.onSyntaxArrowClick}\r\n                style={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                }}\r\n              >\r\n                <FormattedMessage id={'settings.slogan.syntax'} />\r\n                {this.state.showSyntax ? (\r\n                  <MdArrowDropUp\r\n                    style={{\r\n                      verticalAlign: 'middle',\r\n                      marginLeft: 4,\r\n                      fontSize: '1rem',\r\n                    }}\r\n                  />\r\n                ) : (\r\n                  <MdArrowDropDown\r\n                    style={{\r\n                      verticalAlign: 'middle',\r\n                      marginLeft: 4,\r\n                      fontSize: '1rem',\r\n                    }}\r\n                  />\r\n                )}\r\n              </div>\r\n              {this.state.showSyntax ? (\r\n                <div>\r\n                  <FormattedMessage id={'settings.slogan.syntax.summary'}>\r\n                    {text => {\r\n                      if (typeof text !== 'string') {\r\n                        return null\r\n                      }\r\n                      return <ReactMarkdown renderers={{ paragraph: 'div' }} source={text} />\r\n                    }}\r\n                  </FormattedMessage>\r\n                </div>\r\n              ) : (\r\n                undefined\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div\r\n            style={{\r\n              width: '100%',\r\n              display: 'flex',\r\n              flexDirection: 'row',\r\n            }}\r\n          >\r\n            <div style={{ flex: 1 }} />\r\n            <ButtonBar className={'button-bar'}>\r\n              <button\r\n                onClick={this.onReset}\r\n                style={{\r\n                  backgroundColor: scheme.primary,\r\n                  color: scheme.textPrimary,\r\n                }}\r\n              >\r\n                <FormattedMessage id={'action.reset'} />\r\n              </button>\r\n              <button\r\n                onClick={this.onSave}\r\n                style={{\r\n                  backgroundColor: scheme.primary,\r\n                  color: scheme.textPrimary,\r\n                }}\r\n              >\r\n                <FormattedMessage id={'action.save'} />\r\n              </button>\r\n            </ButtonBar>\r\n          </div>\r\n        </PreferenceItem>\r\n      </PreferenceGroup>\r\n    )\r\n\r\n    return <div>{customTab}</div>\r\n  }\r\n}\r\n","import Responsive from 'react-responsive'\nimport React from 'react'\n\nexport const Mobile = (props: any) => <Responsive {...props} maxWidth={425}/>\nexport const Tablet = (props: any) => <Responsive {...props} minWidth={426} maxWidth={768}/>\nexport const Default = (props: any) => <Responsive {...props} minWidth={769}/>\n","import React, { Component } from 'react'\r\nimport {\r\n  Link,\r\n  Route,\r\n  Switch,\r\n  NavLink,\r\n  Redirect,\r\n  RouteComponentProps,\r\n  match as Match,\r\n} from 'react-router-dom'\r\nimport { FormattedMessage, injectIntl } from 'react-intl'\r\nimport { connect } from 'react-redux'\r\nimport { updateLanguage, updateTheme, updateSlogan } from '../redux/actions/settingsAction'\r\nimport { getTheme } from '../theme'\r\nimport { hexToRgbA } from '../utils/colorUtil'\r\nimport { Helmet } from 'react-helmet'\r\nimport { MdClose, MdMoreVert } from 'react-icons/md'\r\nimport { AppearanceTab, AboutTab, SloganTab, LanguageTab } from './tabs'\r\nimport styled from 'styled-components'\r\nimport { Dispatch } from 'redux'\r\nimport AppHeader from '../components/appHeader'\r\nimport { Default, Mobile, Tablet } from '../components/responsive'\r\n\r\nconst Root = styled.div`\r\n  min-height: 100vh;\r\n  box-sizing: border-box;\r\n`\r\n\r\nconst Sider = styled.div`\r\n  padding: 16px;\r\n  border: 0 solid;\r\n  border-right-width: 1px;\r\n  height: 100%;\r\n  min-height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  .selected {\r\n    border-radius: 8px;\r\n    background-color: rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    box-sizing: border-box;\r\n    border-right-width: 0;\r\n    flex-direction: row;\r\n    width: 100%;\r\n    height: auto;\r\n    overflow: auto;\r\n\r\n    ::-webkit-scrollbar {\r\n      width: 0 !important;\r\n    }\r\n  }\r\n`\r\n\r\nconst NavItem = styled(NavLink)`\r\n  text-decoration: none;\r\n  padding: 8px 32px 8px 16px;\r\n  margin-bottom: 16px;\r\n  margin-right: 8px;\r\n  font-size: 1rem;\r\n  white-space: pre;\r\n  font-weight: 500;\r\n\r\n  :hover {\r\n    border-radius: 8px;\r\n    background-color: rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  &.active {\r\n    border-radius: 8px;\r\n    background-color: rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    padding: 8px 16px 8px 16px;\r\n    margin-right: 8px;\r\n  }\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  width: 100%;\r\n  padding: 0 16px;\r\n  display: flex;\r\n  box-sizing: border-box;\r\n  flex-direction: column;\r\n`\r\n\r\ninterface Props {\r\n  theme: string\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  language: state.settings.language,\r\n  theme: state.settings.theme,\r\n  slogan: state.settings.slogan,\r\n  interval: state.settings.interval,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  updateLanguage: (language: string) => dispatch(updateLanguage(language)),\r\n  updateTheme: (theme: string) => dispatch(updateTheme(theme)),\r\n  updateSlogan: (slogan: string) => dispatch(updateSlogan(slogan)),\r\n})\r\n\r\nclass SettingsPage extends Component<RouteComponentProps & Props> {\r\n  state = {\r\n    showMenu: true,\r\n  }\r\n\r\n  render() {\r\n    const { match, theme } = this.props\r\n    const palette = getTheme(theme)\r\n\r\n    const meta = (\r\n      <FormattedMessage id='settings'>\r\n        {name => (\r\n          <Helmet>\r\n            <title>{name}</title>\r\n          </Helmet>\r\n        )}\r\n      </FormattedMessage>\r\n    )\r\n\r\n    const renderRedirect = ((m: Match<any>) => () => <Redirect to={`${m.url}/appearance`} />)(match)\r\n\r\n    const content = (\r\n      <ContentContainer>\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path={`${match.url}/slogan`}\r\n            component={connect(\r\n              mapStateToProps,\r\n              mapDispatchToProps,\r\n            )(injectIntl(SloganTab))}\r\n          />\r\n          <Route\r\n            exact\r\n            path={`${match.url}/language`}\r\n            component={connect(\r\n              mapStateToProps,\r\n              mapDispatchToProps,\r\n            )(LanguageTab)}\r\n          />\r\n          <Route\r\n            exact\r\n            path={`${match.url}/appearance`}\r\n            component={connect(\r\n              mapStateToProps,\r\n              mapDispatchToProps,\r\n            )(AppearanceTab)}\r\n          />\r\n          <Route\r\n            exact\r\n            path={`${match.url}/about`}\r\n            component={connect(\r\n              mapStateToProps,\r\n              mapDispatchToProps,\r\n            )(AboutTab)}\r\n          />\r\n          <Route render={renderRedirect} />\r\n        </Switch>\r\n      </ContentContainer>\r\n    )\r\n\r\n    const links = ['appearance', 'slogan', 'language', 'about']\r\n\r\n    const closeIcon = (\r\n      <Link to={'/'}>\r\n        <MdClose\r\n          style={{\r\n            color: palette.textPrimary,\r\n            fontSize: '2em',\r\n            verticalAlign: 'middle',\r\n          }}\r\n        />\r\n      </Link>\r\n    )\r\n\r\n    const moreIcon = (\r\n      <MdMoreVert\r\n        style={{\r\n          color: palette.textPrimary,\r\n          fontSize: '2em',\r\n          verticalAlign: 'middle',\r\n        }}\r\n        onClick={((page, showMenu) => () => page.setState({ showMenu }))(\r\n          this,\r\n          !this.state.showMenu,\r\n        )}\r\n      />\r\n    )\r\n\r\n    const navItems = links.map((link, key) => (\r\n      <NavItem\r\n        key={key}\r\n        activeClassName={'selected'}\r\n        activeStyle={{ color: palette.textPrimary }}\r\n        style={{ color: palette.textSecondary }}\r\n        to={`${match.url}/${link}`}\r\n      >\r\n        <FormattedMessage id={`settings.${link}`} />\r\n      </NavItem>\r\n    ))\r\n\r\n    const desktopView = (\r\n      <Default>\r\n        <main\r\n          style={{\r\n            height: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n          }}\r\n        >\r\n          <Sider\r\n            style={{\r\n              borderColor: hexToRgbA(palette.textSecondary, 0.2),\r\n            }}\r\n          >\r\n            {navItems}\r\n          </Sider>\r\n          {content}\r\n        </main>\r\n      </Default>\r\n    )\r\n\r\n    const tabletView = (\r\n      <Tablet>\r\n        <main\r\n          style={{\r\n            width: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n          }}\r\n        >\r\n          <Sider\r\n            style={{\r\n              borderColor: hexToRgbA(palette.textSecondary, 0.2),\r\n            }}\r\n          >\r\n            {navItems}\r\n          </Sider>\r\n          {content}\r\n        </main>\r\n      </Tablet>\r\n    )\r\n    const mobileView = (\r\n      <Mobile>\r\n        <main\r\n          style={{\r\n            width: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n          }}\r\n        >\r\n          {this.state.showMenu ? (\r\n            <Sider\r\n              style={{\r\n                borderColor: hexToRgbA(palette.textSecondary, 0.2),\r\n                width: '100%',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n              }}\r\n            >\r\n              {navItems}\r\n            </Sider>\r\n          ) : (\r\n            undefined\r\n          )}\r\n          {content}\r\n        </main>\r\n      </Mobile>\r\n    )\r\n    return (\r\n      <Root\r\n        style={{\r\n          backgroundColor: palette.background,\r\n          color: palette.textPrimary,\r\n        }}\r\n      >\r\n        {meta}\r\n        <FormattedMessage id='settings'>\r\n          {title => [\r\n            <Default key={0}>\r\n              <AppHeader title={title} rightExtra={closeIcon} />\r\n            </Default>,\r\n            <Tablet key={1}>\r\n              <AppHeader title={title} leftExtra={closeIcon} />\r\n            </Tablet>,\r\n            <Mobile key={2}>\r\n              <AppHeader title={title} leftExtra={closeIcon} rightExtra={moreIcon} />\r\n            </Mobile>,\r\n          ]}\r\n        </FormattedMessage>\r\n        {desktopView}\r\n        {tabletView}\r\n        {mobileView}\r\n      </Root>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(SettingsPage)\r\n","import I18n from './i18n'\r\n\r\nexport default {\r\n  appName: '织蛾',\r\n\r\n  'slogan.default': `**织蛾**\r\n`,\r\n  'action.ok': '好的',\r\n  'action.save': '保存',\r\n  'action.save.success': '保存成功',\r\n  'action.cancel': '取消',\r\n  'action.reset': '重置',\r\n\r\n  settings: '设置',\r\n  'settings.application': '应用程序',\r\n  'settings.appearance': '界面',\r\n  'settings.language': '语言',\r\n  'settings.language.default': '跟随系统',\r\n  'settings.about': '关于',\r\n  'settings.slogan': '标语',\r\n  'settings.slogan.syntax': '语法说明',\r\n  'settings.slogan.syntax.summary': `一行语句为一段，使用 | 进行段内分行\r\n\r\n另外支持使用部分简单的 Markdown 语法：\r\n\r\n\\`**加粗**\\` ⇨ **加粗**\r\n\r\n\\`*斜体*\\` ⇨ *斜体*\r\n\r\n\\`~~删除~~\\` ⇨ ~~删除~~`,\r\n  'settings.slogan.custom': '自定义标语',\r\n  'settings.slogan.interval': '时间间隔',\r\n  'settings.about.release_note': '更新日志',\r\n  'settings.appearance.theme': '主题',\r\n  'settings.appearance.theme.white': '白 色',\r\n  'settings.appearance.theme.black': '黑 色',\r\n  'settings.appearance.theme.light': '亮 色',\r\n  'settings.appearance.theme.dark': '暗 色',\r\n  'settings.appearance.theme.chrome-dark': 'Chrome(暗)',\r\n} as I18n\r\n","import I18n from './i18n'\r\n\r\nexport default {\r\n  appName: '織蛾',\r\n\r\n  'slogan.default': `織蛾\r\n`,\r\n  'action.ok': '好的',\r\n  'action.save': '保存',\r\n  'action.save.success': '保存成功',\r\n  'action.cancel': '取消',\r\n  'action.reset': '重置',\r\n\r\n  settings: '設置',\r\n  'settings.application': '應用程序',\r\n  'settings.appearance': '界面',\r\n  'settings.language': '語言',\r\n  'settings.language.default': '跟隨系統',\r\n  'settings.about': '關於',\r\n  'settings.slogan': '標語',\r\n  'settings.slogan.syntax': '語法說明',\r\n  'settings.slogan.syntax.summary': `一行語句為一段，使用 | 進行段內分行\r\n\r\n另外支持使用部分簡單的 Markdown 語法：\r\n\r\n\\`**加粗**\\` ⇨ **加粗**\r\n\r\n\\`*斜體*\\` ⇨ *斜體*\r\n\r\n\\`~~刪除~~\\` ⇨ ~~刪除~~`,\r\n  'settings.slogan.custom': '自定義標語',\r\n  'settings.slogan.interval': '時間間隔',\r\n  'settings.about.release_note': '更新日誌',\r\n  'settings.appearance.theme': '主題',\r\n  'settings.appearance.theme.white': '白 色',\r\n  'settings.appearance.theme.black': '黑 色',\r\n  'settings.appearance.theme.light': '亮 色',\r\n  'settings.appearance.theme.dark': '暗 色',\r\n  'settings.appearance.theme.chrome-dark': 'Chrome(暗)',\r\n} as I18n\r\n","import I18n from './i18n'\r\n\r\nexport default {\r\n  appName: 'moth',\r\n\r\n  'slogan.default': `moth\r\n`,\r\n  'action.ok': 'OK',\r\n  'action.save': 'Save',\r\n  'action.save.success': 'Saved successfully',\r\n  'action.cancel': 'Cancel',\r\n  'action.reset': 'Reset',\r\n\r\n  settings: 'Settings',\r\n  'settings.application': 'Application',\r\n  'settings.appearance': 'Appearance',\r\n  'settings.language': 'Language',\r\n  'settings.language.default': 'Default',\r\n  'settings.about': 'About',\r\n  'settings.slogan': 'Slogan',\r\n  'settings.slogan.syntax': 'Syntax description',\r\n  'settings.slogan.syntax.summary': `\r\nOne line statement is a paragraph, use '|' to perform line break\r\n\r\nAnd you can use some basic Markdown inline syntax:\r\n\r\n\\`**Bold**\\` ⇨ **Bold**\r\n\r\n\\`*Italic*\\` ⇨ *Italic*\r\n\r\n\\`~~Delete~~\\` ⇨ ~~Delete~~`,\r\n  'settings.slogan.custom': 'Custom slogan',\r\n  'settings.slogan.interval': 'Interval',\r\n  'settings.about.release_note': 'Release Notes',\r\n  'settings.appearance.theme': 'Theme',\r\n  'settings.appearance.theme.white': 'White',\r\n  'settings.appearance.theme.black': 'Black',\r\n  'settings.appearance.theme.light': 'Light',\r\n  'settings.appearance.theme.dark': 'Dark',\r\n  'settings.appearance.theme.chrome-dark': 'Chrome Dark',\r\n} as I18n\r\n","import zhHans from './zhHans'\r\nimport zhHant from './zhHant'\r\nimport enUS from './enUS'\r\nimport I18n from './i18n'\r\n\r\nexport function getLocale(language: string): I18n {\r\n  let target = language\r\n  if (!target) {\r\n    // @ts-ignore\r\n    target = navigator.userLanguage || navigator.language\r\n  }\r\n  switch (target.toLocaleLowerCase()) {\r\n    case 'zh':\r\n    case 'zh-hans':\r\n    case 'zh-cn':\r\n      return zhHans\r\n    case 'zh-hk':\r\n    case 'zh-tw':\r\n    case 'zh-mo':\r\n    case 'zh-sg':\r\n    case 'zh-hant':\r\n      return zhHant\r\n    default:\r\n      return enUS\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom'\r\n\r\nimport HomePage from './containers/homePage'\r\nimport SettingsPage from './containers/settingsPage'\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport { getLocale } from './locale'\r\n\r\nimport { addLocaleData, FormattedMessage, IntlProvider } from 'react-intl'\r\nimport zh from 'react-intl/locale-data/zh'\r\nimport en from 'react-intl/locale-data/en'\r\nimport { Helmet } from 'react-helmet'\r\n\r\nimport { getTheme } from './theme'\r\nimport { getQueryParamsFromUrl } from './utils/urlUtil'\r\n\r\naddLocaleData([...en, ...zh])\r\n\r\ninterface Props {\r\n  theme: string\r\n  language: string\r\n}\r\n\r\nclass App extends Component<Props> {\r\n  render() {\r\n    const theme = this.props.theme\r\n    const scheme = getTheme(theme)\r\n\r\n    const meta = (\r\n      <FormattedMessage id={'appName'}>\r\n        {appName => (\r\n          <Helmet>\r\n            <meta charSet='utf-8' />\r\n            <title>{appName}</title>\r\n            <meta name='theme-color' content={scheme.background} />\r\n          </Helmet>\r\n        )}\r\n      </FormattedMessage>\r\n    )\r\n\r\n    const route = (\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path={'/'} component={HomePage} />\r\n          <Route path={'/settings'} component={SettingsPage} />\r\n          <Route render={(() => () => <Redirect to={'/'} />)()} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    )\r\n\r\n    return (\r\n      <IntlProvider locale={navigator.language} messages={getLocale(this.props.language)}>\r\n        <div>\r\n          {meta}\r\n          {route}\r\n        </div>\r\n      </IntlProvider>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    language: getQueryParamsFromUrl('lang') || state.settings.language,\r\n    theme: state.settings.theme,\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null,\r\n)(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?(registration: ServiceWorkerRegistration): void\r\n  onUpdate?(registration: ServiceWorkerRegistration): void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href,\r\n    )\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker === null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType !== null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import * as types from '../actionTypes'\r\nimport { AnyAction } from 'redux'\r\n\r\nconst initialState = {}\r\n\r\nexport function SettingsReducer(state = initialState, action: AnyAction) {\r\n  switch (action.type) {\r\n    case types.UPDATE_LANGUAGE:\r\n      return {\r\n        ...state,\r\n        language: action.language,\r\n      }\r\n    case types.UPDATE_THEME:\r\n      return {\r\n        ...state,\r\n        theme: action.theme,\r\n      }\r\n    case types.UPDATE_SLOGAN:\r\n      return {\r\n        ...state,\r\n        slogan: action.slogan,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\n\r\nimport { SettingsReducer } from './settingsReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  settings: SettingsReducer,\r\n})\r\n\r\nexport default rootReducer\r\n","import { applyMiddleware, createStore } from 'redux'\r\nimport * as actionCreators from './actions/settingsAction'\r\nimport logger from 'redux-logger'\r\nimport { persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport rootReducer from './reducers/index'\r\n\r\nconst middlewares = [logger]\r\nconst createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore)\r\n\r\nconst enhancer =\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({ actionCreators })\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n}\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nexport default function configureStore() {\r\n  return createStoreWithMiddleware(persistedReducer, enhancer)\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './app'\r\nimport * as ServiceWorker from './utils/registerServiceWorker'\r\nimport configureStore from './redux/configureStore'\r\nimport { Provider } from 'react-redux'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport { persistStore } from 'redux-persist'\r\n\r\nconst store = configureStore()\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate persistor={persistStore(store)}>\r\n      <App />\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n)\r\n\r\nServiceWorker.register()\r\n"],"sourceRoot":""}